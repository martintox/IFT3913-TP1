Pour cette partie, nous ignorons les classes et paquets ayant un BC de 0 puisque ceux- et celles-ci sont considérées comme étant des “outliers". En tenant compte de ce fait, les 3 classes ayant les pire BC sont XYPlot, CategoryPlot et DatasetUtils, tandis que les 3 paquets identifiés sont plot, xy et axis. L’explication derrière le bas degré de bons commentaires et les propositions pour améliorer la situation sont les mêmes dans tous les cas : Un problème majeur est que les paquets contiennent, souvent, plusieurs classes ayant des milliers, voire une dizaine de milliers de lignes de code, ce qui n’est pas une bonne pratique; Une classe devrait ne contenir que des méthodes qui sont étroitement reliées l'une avec l'autre en termes de but commun. En effet, une classe devrait avoir une seule et unique fonctionnalité, avec quelques méthodes qui chacune implémente une partie plus ou moins indépendante de la logique, dans l'optique de modularisation pour ensuite pouvoir réutiliser le code si besoin est. L’approche idéale ici serait de diviser le code en plusieurs classes, ce qui créerait potentiellement plusieurs paquets additionnels, quoique cela ne poserait vraisemblablement pas problème. Un autre problème découlant du précédent est qu'on a parfois des méthodes possédant des centaines de lignes de code, ce qui n’est également pas une bonne pratique; Il est mieux de modulariser le code en plusieurs méthodes puisque sinon, on tente véritablement d’effectuer une panoplie de différentes fonctions dans la même méthode, ce qui remet en question la nature et l'objectif de cette dernière. Un problème typique qui survient parmi ces méthodes est que, même si la javadoc y est présente, il arrive souvent par la suite que la méthode elle-même ne contienne peu de “single-line comments" ou même, pas du tout. Le fait qu’il y ait addtionnellement présence de “nombres magiques" ainsi que d’une quantité faramineuse de branchements if/else aide à conclure que la javadoc n’est pas suffisante pour bien comprendre la méthode au fur et à mesure de la lire.