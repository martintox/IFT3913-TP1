Pour cette partie, on ignore au préalable les classes et paquets ayant un BC de 0, qu'on considère comme des aberrations. En tenant compte de ce fait, les 3 classes ayant les pires BC sont XYPlot, CategoryPlot, et DatasetUtils, tandis que les 3 paquets ayant les pires BC sont plot, xy, et axis.

Pour chaque cas, la basse quantité de commentaires s'explique et peut se résoudre de la même façon. De prime abord, les paquets contiennent plusieurs classes qui ont des milliers, voir même une dizaine de milliers de lignes de code. Ceci peut être indicatif d'une mauvaise pratique par rapport à l'organisation du code. Une classe donnée devrait ne contenir que des méthodes qui sont étroitement reliées, idéalement parce qu'elles sont des composantes de la logique d'une seule fonction en particulier. Cette approche facilite la modularisation et la réutilisation du code, ainsi que la lisibilité. Une solution est donc de subdiviser ces grandes classes en plusieurs plus petites; quoique le nombre de paquets risquerait d'augmenter, on éviterait ainsi d'avoir des classes immenses de la sorte, d'autant plus que celles-ci sont généralement les exceptions dans leurs dossiers. Par exemple, dans le paquet "plot", CategoryPlot et XYPlot sont de loin les classes les plus grandes.

Un autre problème est la taille des méthodes. Certaines possèdent des centaines de lignes de code, ce qui est problématique pour la même raison que la taille des classes. À nouveau, il est préférable de séparer ces méthodes en plusieurs plus petites; sinon, on risque d'effectuer une panoplie d'étapes dans la même méthode, ce qui endommage la flexibilité du code si on souhaite faire des modifications par la suite. En raison de la taille de ces méthodes, il arrive souvent qu'elles ne contiennent peu, ou même aucun commentaire d'une ligne ("single-line comment"). La présence de "nombres magiques" ainsi que d'un grand nombre de branchements du type "if/else" rend l'absence de commentaires toute aussi flagrante; la javadoc présente est, par conséquent, inadéquate pour aider à la compréhension de ces méthodes lors de la lecture du code.